import itertools as it
import math
import numpy as np


color2index = [
    (240, 0, 46),   # Z-0
    (251, 79, 0),   # L-1
    (243, 156, 0),  # O-2
    (30, 180, 0),   # S-3
    (0, 157, 217),  # I-4
    (0, 63, 201),   # J-5
    (194, 8, 138)   # T-6
]
index2piece = {-1: '.', 0: 'Z', 1: 'L', 2: 'O', 3: 'S', 4: 'I', 5: 'J', 6: 'T'}
shape2index = [
    np.array([[1, 1, 0], [0, 1, 1]]),   # Z-0
    np.array([[0, 0, 1], [1, 1, 1]]),   # L-1
    np.array([[1, 1], [1, 1]]),         # O-2
    np.array([[0, 1, 1], [1, 1, 0]]),   # S-3
    np.array([[1, 1, 1, 1]]),           # I-4
    np.array([[1, 0, 0], [1, 1, 1]]),   # J-5
    np.array([[0, 1, 0], [1, 1, 1]])    # T-6
]
starting_board_dict = [
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
        [1, 0, 0, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ]),
    np.array([
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 0, 1, 1]
    ])
]
# 0 = unordered
# 1 = ordered
# 2 = either/or (repeat pieces)
sol_dict = [
    { [
        0,
        [
            2,
            [
                1,
                'S',
                [
                    0,
                    'O',
                    'I'
                ]
            ],
            [
                1,
                'I',
                'S',
                'O'
            ]
        ],
        [
            1,
            'T',
            [
                0,
                'L',
                'Z'
            ]
        ]
    ] },
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None
]
sol_list = [
    [
        np.array([
            [ 2,  2,  4,  4,  4,  4,  5, 5,  5,  0],
            [ 2,  2,  3,  3, -1, -1,  1, 1,  0,  0],
            [-1,  3,  3, -1, -1, -1, -1, 1,  0, -1],
            [-1, -1, -1, -1, -1, -1, -1, 1,  5, -1],
            [-1, -1, -1, -1, -1, -1,  6, 6,  6, -1],
            [-1, -1, -1, -1, -1, -1, -1, 6, -1, -1]
        ]),
        np.array([
            [ 2,  2,  5,  1,  1,  1,  4, 4,  4,  4],
            [ 2,  2,  5,  1, -1, -1,  0, 0,  3,  3],
            [-1,  5,  5, -1, -1, -1, -1, 0,  0, -1],
            [-1, -1, -1, -1, -1, -1, -1, 3,  3, -1],
            [-1, -1, -1, -1, -1, -1,  6, 6,  6, -1],
            [-1, -1, -1, -1, -1, -1, -1, 6, -1, -1]
        ]),
        np.array([
            [ 2,  2,  5,  1,  1,  1,  4, 4,  4,  4],
            [ 2,  2,  5,  1, -1, -1,  0, 0,  3,  3],
            [-1,  5,  5, -1, -1, -1, -1, 3,  3, -1],
            [-1, -1, -1, -1, -1, -1, -1, 0,  0, -1],
            [-1, -1, -1, -1, -1, -1,  6, 6,  6, -1],
            [-1, -1, -1, -1, -1, -1, -1, 6, -1, -1]
        ]),
        np.array([
            [ 2,  2,  5,  1,  1,  1,  0, 0,  3,  3],
            [ 2,  2,  5,  1, -1, -1,  4, 4,  4,  4],
            [-1,  5,  5, -1, -1, -1, -1, 0,  0, -1],
            [-1, -1, -1, -1, -1, -1, -1, 3,  3, -1],
            [-1, -1, -1, -1, -1, -1,  6, 6,  6, -1],
            [-1, -1, -1, -1, -1, -1, -1, 6, -1, -1]
        ]),
        np.array([
            [ 5,  2,  2,  1,  1,  1,  0, 0,  3,  3],
            [ 5,  5,  5,  1, -1, -1,  4, 4,  4,  4],
            [-1,  2,  2, -1, -1, -1, -1, 0,  0, -1],
            [-1, -1, -1, -1, -1, -1, -1, 3,  3, -1],
            [-1, -1, -1, -1, -1, -1,  6, 6,  6, -1],
            [-1, -1, -1, -1, -1, -1, -1, 6, -1, -1]
        ])
    ],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    []
]


def get_color_dist(rgb1, rgb2):
    return math.sqrt((rgb2[0] - rgb1[0]) ** 2 + (rgb2[1] - rgb1[1]) ** 2 + (rgb2[2] - rgb1[2]) ** 2)


def is_similar_color(rgb1, rgb2, max_dist=60):
    return get_color_dist(rgb1, rgb2) < max_dist


def does_contain_subset(arr, match):
    for y, x in it.product(
            [i for i in range(arr.shape[0] - match.shape[0] + 1)],
            [i for i in range(arr.shape[1] - match.shape[1] + 1)]
    ):
        if np.array_equal(match, arr[y: y + match.shape[0], x: x + match.shape[1]]):
            return True
    return False


def compare_array(arr1, arr2):
    # Precondition: both arrays are the same size
    a1, a2 = arr1.flatten(), arr2.flatten()
    for i, j in zip(a1, a2):
        if i > j:
            return 1
        elif i < j:
            return -1
    return 0


def binary_search(arr, target, compare_func, high, low):
    if high >= low:
        mid = (high + low) // 2
        res = compare_func(target, arr[mid])
        if res == 0:
            return mid
        elif res == 1:
            return binary_search(arr, target, compare_func, high, mid + 1)
        else:
            return binary_search(arr, target, compare_func, mid - 1, low)
    return -1
